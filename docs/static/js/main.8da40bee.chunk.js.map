{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","seedText","setSeedText","inputText","setInputText","outputText","setOutputText","svgElement","setSvgElement","console","log","type","onChange","e","target","value","onClick","seed","then","m","generate","text","cols","rows","input","output","svgText","visualize","parse","error","s","style","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAuDeA,MApCf,WAAgB,IAAD,EACmBC,mBAAS,KAD5B,mBACNC,EADM,KACIC,EADJ,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGuBJ,mBAAS,IAHhC,mBAGNK,EAHM,KAGMC,EAHN,OAIuBN,mBAA+C,IAJtE,mBAINO,EAJM,KAIMC,EAJN,KAMb,OADAC,QAAQC,IAAIH,GAEV,gCACE,wCAEA,uBAAOI,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAOX,EAAYW,EAAEC,OAAOC,UACvD,wBAAQC,QAAS,WA1BzB,IAAkBC,KA2BChB,EA1BV,6BAAwBiB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,SAASH,OA0BzBC,MAAK,SAAAG,GACtBjB,EAAaiB,GACbf,EAAc,QAHlB,yBAOF,gCACE,yCAEA,0BAAUgB,KAAM,GAAIC,KAAM,GAAIR,MAAOZ,EAAWS,SAAU,SAACC,GAAD,OAAOT,EAAaS,EAAEC,OAAOC,aAEvF,0CAEA,0BAAUO,KAAM,GAAIC,KAAM,GAAIR,MAAOV,EAAYO,SAAU,SAACC,GAAD,OAAOP,EAAcO,EAAEC,OAAOC,gBAG3F,gCACE,wBAAQC,QAAS,kBAxCNQ,EAwCsBrB,EAxCPsB,EAwCkBpB,EAvC3C,6BAAwBa,MAAK,SAAAC,GAClC,IACE,IAAMO,EAAUP,EAAEQ,UAAUH,EAAOC,GACnC,OAAOG,YAAMF,GACb,MAAOG,GACP,MAAO,eAkCmDX,MAAK,SAAAY,GAAC,OAAItB,EAAcsB,MAxCxF,IAAmBN,EAAeC,GAwC1B,uBACA,qBAAKM,MAAO,CAAEC,MAAO,KAArB,SAA8BzB,WCnCvB0B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8da40bee.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport parse from 'html-react-parser';\n\nfunction generate(seed: string): Promise<string> {\n  return import(\"./tools/build\").then(m => m.generate(seed));\n}\n\nfunction visualize(input: string, output: string): Promise<string | JSX.Element | JSX.Element[]> {\n  return import(\"./tools/build\").then(m => {\n    try {\n      const svgText = m.visualize(input, output);\n      return parse(svgText);\n    } catch (error) {\n      return \"Invalid\";\n    }\n  });\n}\n\nfunction App() {\n  const [seedText, setSeedText] = useState(\"1\");\n  const [inputText, setInputText] = useState(\"\");\n  const [outputText, setOutputText] = useState(\"\");\n  const [svgElement, setSvgElement] = useState<string | JSX.Element | JSX.Element[]>(\"\");\n  console.log(svgElement);\n  return (\n    <div>\n      <div>\n        Seed:\n      <input type=\"text\" onChange={(e) => setSeedText(e.target.value)} />\n        <button onClick={() => {\n          generate(seedText).then(text => {\n            setInputText(text);\n            setOutputText(\"\");\n          })\n        }}>Generate</button>\n      </div>\n      <div>\n        <div>\n          Input:\n        <textarea cols={50} rows={10} value={inputText} onChange={(e) => setInputText(e.target.value)} />\n        </div>\n        <div>\n          Output:\n        <textarea cols={50} rows={10} value={outputText} onChange={(e) => setOutputText(e.target.value)} />\n        </div>\n      </div>\n      <div>\n        <button onClick={() => visualize(inputText, outputText).then(s => setSvgElement(s))}>Visualize</button>\n        <div style={{ width: 1000 }}>{svgElement}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}